# DJ AI App - Automated Testing Workflow
# Author: Sergie Code
# Purpose: Continuous Integration for the DJ AI orchestrator

name: DJ AI App - Test Suite

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

env:
  COMPOSE_PROJECT_NAME: dj-ai-app-ci

jobs:
  validate-configuration:
    name: Validate Configuration Files
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml
        
    - name: Validate YAML files
      run: |
        python -c "
        import yaml
        import sys
        
        files = ['docker-compose.yml', 'docker-compose.dev.yml', 'docker-compose.prod.yml']
        
        for file in files:
            try:
                with open(file, 'r') as f:
                    yaml.safe_load(f)
                print(f'✓ {file} is valid YAML')
            except yaml.YAMLError as e:
                print(f'✗ {file} has invalid YAML: {e}')
                sys.exit(1)
            except FileNotFoundError:
                print(f'✗ {file} not found')
                sys.exit(1)
        "
        
    - name: Validate Docker Compose configuration
      run: |
        # Try modern docker compose first, fallback to docker-compose
        if command -v docker &> /dev/null; then
          if docker compose version &> /dev/null; then
            echo "Using docker compose (modern)"
            docker compose config
          elif command -v docker-compose &> /dev/null; then
            echo "Using docker-compose (legacy)"
            docker-compose config
          else
            echo "Installing docker-compose..."
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            docker-compose config
          fi
        else
          echo "Docker not available, skipping validation"
          exit 0
        fi
        
    - name: Check required files
      run: |
        required_files=(
          "README.md"
          "docker-compose.yml"
        )
        
        optional_files=(
          "docker-compose.dev.yml"
          "docker-compose.prod.yml"
          ".env.development"
          ".env.production"
          "config/nginx.conf"
          "scripts/setup.ps1"
          "scripts/start-dev.ps1"
          "scripts/health-check.ps1"
        )
        
        echo "Checking required files..."
        for file in "${required_files[@]}"; do
          if [ -f "$file" ]; then
            echo "✓ $file exists"
          else
            echo "✗ $file missing"
            exit 1
          fi
        done
        
        echo "Checking optional files..."
        for file in "${optional_files[@]}"; do
          if [ -f "$file" ]; then
            echo "✓ $file exists"
          else
            echo "⚠️ $file missing (optional)"
          fi
        done

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: validate-configuration
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install test dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-test.txt
        
    - name: Run unit tests
      run: |
        python -m pytest tests/unit -v --tb=short --cov=. --cov-report=xml
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create required directories
      run: |
        mkdir -p data/uploads data/models
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install test dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-test.txt
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Create mock repositories
      run: |
        # Create mock dj-ai-core
        mkdir -p ../dj-ai-core/app
        echo 'from fastapi import FastAPI; app = FastAPI()' > ../dj-ai-core/app/main.py
        echo 'fastapi==0.104.1' > ../dj-ai-core/requirements.txt
        cat > ../dj-ai-core/Dockerfile << 'EOF'
        FROM python:3.12-slim
        WORKDIR /app
        COPY requirements.txt .
        RUN pip install -r requirements.txt
        COPY . .
        EXPOSE 8000
        CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]
        EOF
        
        # Create mock dj-ai-frontend
        mkdir -p ../dj-ai-frontend/src
        echo '{"name": "dj-ai-frontend", "scripts": {"start": "echo Starting frontend"}}' > ../dj-ai-frontend/package.json
        cat > ../dj-ai-frontend/Dockerfile << 'EOF'
        FROM node:18-alpine
        WORKDIR /app
        COPY package.json .
        RUN npm install --only=production || true
        COPY . .
        EXPOSE 3000
        CMD ["npm", "start"]
        EOF
        
    - name: Start services
      run: |
        # Use modern docker compose
        if docker compose version &> /dev/null; then
          docker compose -f docker-compose.yml up -d --build
        else
          docker-compose -f docker-compose.yml up -d --build
        fi
        
    - name: Wait for services
      run: |
        # Wait for services to start
        sleep 30
        
        # Check if services are running
        if docker compose version &> /dev/null; then
          docker compose ps
        else
          docker-compose ps
        fi
        
    - name: Check service logs
      run: |
        echo "=== Backend logs ==="
        if docker compose version &> /dev/null; then
          docker compose logs dj-ai-core || true
          echo "=== Frontend logs ==="
          docker compose logs dj-ai-frontend || true
        else
          docker-compose logs dj-ai-core || true
          echo "=== Frontend logs ==="
          docker-compose logs dj-ai-frontend || true
        fi
        
    - name: Run integration tests
      run: |
        python -m pytest tests/integration -v --tb=short -m "not slow"
        
    - name: Stop services
      if: always()
      run: |
        if docker compose version &> /dev/null; then
          docker compose down -v || true
        else
          docker-compose down -v || true
        fi

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create required directories
      run: |
        mkdir -p data/uploads data/models
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install test dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-test.txt
        
    - name: Create mock repositories
      run: |
        # Create mock dj-ai-core (enhanced)
        mkdir -p ../dj-ai-core/app
        cat > ../dj-ai-core/app/main.py << 'EOF'
        from fastapi import FastAPI
        from fastapi.middleware.cors import CORSMiddleware
        
        app = FastAPI(title="DJ AI Core", version="1.0.0")
        
        app.add_middleware(
            CORSMiddleware,
            allow_origins=["*"],
            allow_credentials=True,
            allow_methods=["*"],
            allow_headers=["*"],
        )
        
        @app.get("/")
        def read_root():
            return {"name": "DJ AI Core", "version": "1.0.0", "description": "AI-powered DJ backend"}
            
        @app.get("/health")
        def health_check():
            return {"status": "healthy", "timestamp": "2024-01-01T00:00:00Z"}
            
        @app.get("/supported-formats")
        def supported_formats():
            return {"formats": ["mp3", "wav", "flac", "m4a"]}
        EOF
        
        echo 'fastapi==0.104.1' > ../dj-ai-core/requirements.txt
        echo 'uvicorn==0.24.0' >> ../dj-ai-core/requirements.txt
        
        cat > ../dj-ai-core/Dockerfile << 'EOF'
        FROM python:3.12-slim
        WORKDIR /app
        COPY requirements.txt .
        RUN pip install -r requirements.txt
        COPY . .
        EXPOSE 8000
        HEALTHCHECK --interval=10s --timeout=5s --start-period=30s --retries=3 \
          CMD curl -f http://localhost:8000/health || exit 1
        CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]
        EOF
        
        # Create mock dj-ai-frontend (enhanced)
        mkdir -p ../dj-ai-frontend/public
        cat > ../dj-ai-frontend/package.json << 'EOF'
        {
          "name": "dj-ai-frontend",
          "version": "1.0.0",
          "scripts": {
            "start": "python -m http.server 3000"
          }
        }
        EOF
        
        cat > ../dj-ai-frontend/public/index.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head><title>DJ AI Frontend</title></head>
        <body><h1>DJ AI Frontend - Mock</h1></body>
        </html>
        EOF
        
        cat > ../dj-ai-frontend/Dockerfile << 'EOF'
        FROM python:3.12-slim
        WORKDIR /app
        COPY . .
        EXPOSE 3000
        CMD ["python", "-m", "http.server", "3000"]
        EOF
        
    - name: Start services
      run: |
        echo "Starting DJ AI services..."
        
        # Try modern docker compose first, fallback to docker-compose
        if docker compose version &> /dev/null; then
          echo "Using docker compose (modern)"
          docker compose up -d --build
        elif command -v docker-compose &> /dev/null; then
          echo "Using docker-compose (legacy)"
          docker-compose up -d --build
        else
          echo "Installing docker-compose..."
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose up -d --build
        fi
        
    - name: Wait for services to be healthy
      run: |
        echo "Waiting for services to start..."
        timeout 180 bash -c '
          while true; do
            if curl -f http://localhost:8000/health >/dev/null 2>&1 && curl -f http://localhost:3000 >/dev/null 2>&1; then
              echo "Services are ready!"
              break
            fi
            echo "Waiting for services..."
            sleep 5
          done
        '
        
    - name: Run end-to-end tests
      run: |
        python -m pytest tests/e2e -v --tb=short -m "not slow"
        
    - name: Generate test report
      if: always()
      run: |
        python -m pytest tests/ --html=reports/test_report.html --self-contained-html --tb=short || true
        
    - name: Upload test report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-report
        path: reports/
        
    - name: Stop services
      if: always()
      run: |
        if docker compose version &> /dev/null; then
          docker compose down -v || true
        else
          docker-compose down -v || true
        fi

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate-configuration
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, security-scan]
    if: always()
    
    steps:
    - name: Test Results Summary
      run: |
        echo "## 🧪 DJ AI App - Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Test Type | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Unit Tests | ${{ needs.unit-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration Tests | ${{ needs.integration-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| E2E Tests | ${{ needs.e2e-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Scan | ${{ needs.security-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Author**: Sergie Code - AI Tools for Musicians 🎵💻" >> $GITHUB_STEP_SUMMARY
