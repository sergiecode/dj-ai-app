version: '3.8'

services:
  # DJ AI Core Backend Service
  dj-ai-core:
    build: 
      context: ../dj-ai-core
      dockerfile: Dockerfile
    container_name: dj-ai-core
    ports:
      - "8000:8000"
    environment:
      # API Configuration
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - API_WORKERS=1
      
      # Audio Processing
      - MAX_FILE_SIZE=50MB
      - SUPPORTED_FORMATS=mp3,wav,flac,m4a
      - SAMPLE_RATE=22050
      
      # ML Models
      - MODEL_DIR=/app/ml/models/
      - ENABLE_GPU=false
      
      # Logging
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json
      
      # CORS (for frontend integration)
      - CORS_ORIGINS=http://localhost:3000,http://localhost:5173,http://localhost:80
      - CORS_METHODS=GET,POST,PUT,DELETE,OPTIONS
      - CORS_HEADERS=*
    volumes:
      - ./data/uploads:/app/uploads
      - ./data/models:/app/ml/models
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - dj-ai-network
    restart: unless-stopped

  # DJ AI Frontend Service
  dj-ai-frontend:
    build: 
      context: ../dj-ai-frontend
      dockerfile: Dockerfile
    container_name: dj-ai-frontend
    ports:
      - "3000:3000"
    environment:
      # Backend API Configuration
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_API_BASE_URL=http://dj-ai-core:8000
      - REACT_APP_WEBSOCKET_URL=ws://localhost:8000/ws
      
      # Development Configuration
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    volumes:
      - ../dj-ai-frontend/src:/app/src
      - ../dj-ai-frontend/public:/app/public
      - /app/node_modules
    depends_on:
      dj-ai-core:
        condition: service_healthy
    networks:
      - dj-ai-network
    restart: unless-stopped

  # Nginx Reverse Proxy (Optional - for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: dj-ai-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
    depends_on:
      - dj-ai-core
      - dj-ai-frontend
    networks:
      - dj-ai-network
    restart: unless-stopped
    profiles:
      - production

# Shared Network
networks:
  dj-ai-network:
    driver: bridge
    name: dj-ai-network

# Shared Volumes
volumes:
  dj_uploads:
    driver: local
  dj_models:
    driver: local
  node_modules:
    driver: local
